#!/bin/bash

# Gather Monitoring Metrics and Dashboards.
# - Discovery and save Grafana dashboards, extracting the metrics' datapoints from Prometheus.
# - Gather custom metrics (when defined on Config variables).
# - Discovery metrics from prefix name.
#
# Config variables:
# - GAHTER_MONIT_START_DATE: starting human readable date string (date -d). Default: "7 days ago".
# - GAHTER_MONIT_END_DATE: ending human readable date string (date -d). Default: "now".
# - GAHTER_MONIT_QUERY_STEP: metric resolution to get from Prometheus. Default: "1m".
# - GATHER_MONIT_CUSTOM_METRICS: list of additional metrics name to be collected. Default: Undefined
# - GATHER_MONIT_DISCOVERY_PREFIXES: discovery metrics by prefixes. Default: ''
# - GAHTER_MONIT_TOKEN: optional service account token to gather Prometheus and Grafana API. Default: Undefined
#
# To create the ConfigMap:
# $ echo -e 'GAHTER_MONIT_START_DATE="15 days ago"\nGAHTER_MONIT_QUERY_STEP="5m"' > env
# $ echo -e 'GATHER_MONIT_CUSTOM_METRICS="up"' > env
# $ echo -e 'GATHER_MONIT_DISCOVERY_PREFIXES="apiserver_"' > env
# $ oc create configmap must-gather-env -n openshift-monitoring --from-file=env=env
#
# References:
# - Prometheus API: https://prometheus.io/docs/prometheus/latest/querying/api/

#Safeguards
set -o pipefail

err_report() {
    echo "ERROR: on line $1 from ${0}"
}
trap 'err_report $LINENO' ERR

declare -r GAHTER_MONIT_START_DATE_DEFAULT="7 days ago"
declare -r GAHTER_MONIT_END_DATE_DEFAULT="now"
declare -r GAHTER_MONIT_QUERY_STEP_DEFAULT="1m"

declare -r MONIT_NS="openshift-monitoring"
declare -r MONIT_ENV="must-gather-env"

declare -r CURL_CMD=(curl --fail -sk)

declare -r BASE_COLLECTION_PATH="/must-gather"
declare -r MONITORING_PATH="${BASE_COLLECTION_PATH}/monitoring"
declare -r PROM_PATH="${MONITORING_PATH}/prometheus"
declare -r CA_BUNDLE="${MONITORING_PATH}/ca-bundle.crt"

# Setting: Session token, overwriten by GAHTER_MONIT_TOKEN
declare -r SS_TOKEN="${GAHTER_MONIT_TOKEN:-$(oc whoami -t)}"
declare -r SA_TOKEN="$(oc sa get-token default)"
declare -r PROM_HOST=$(oc -n "${MONIT_NS}" get route prometheus-k8s -o jsonpath='{.spec.host}{"\n"}')

function get_env {
    oc -n "${MONIT_NS}" extract "cm/${MONIT_ENV}" \
        --keys=env \
        --to="${MONITORING_PATH}/" 1&>2 2> /dev/null || true

    echo "INFO: Get custom metrics from ConfigMap ${MONIT_ENV} on project ${MONIT_NS}"
    if [[ -s "${MONITORING_PATH}/env" ]]; then
        echo "INFO: Loading custom environments variables from ${MONITORING_PATH}/env"
        source "${MONITORING_PATH}/env"
    else
        echo "INFO: Unable to load custom environments from ConfigMap, ignoring."
    fi
}

# this is a CA bundle we need to verify the monitoring route,
# we will write it to disk so we can use it in the flag
function get_ca_bundle {
    oc -n openshift-config-managed \
        get cm default-ingress-cert \
        -o jsonpath='{.data.ca-bundle\.crt}' > "${CA_BUNDLE}"
}

function init {

    test -d "${PROM_PATH}" || mkdir -p "${PROM_PATH}"

    get_ca_bundle

    get_env

    # Setting: Timestamp to Prometheus' query range
    declare -r _START_HUNAN=${GAHTER_MONIT_START_DATE:-${GAHTER_MONIT_START_DATE_DEFAULT}}
    declare -g DATE_START=$(date -d "${_START_HUNAN}" +%s)
    declare -r _END_HUMAN=${GAHTER_MONIT_END_DATE:-${GAHTER_MONIT_END_DATE_DEFAULT}}
    declare -g DATE_END=$(date -d "${_END_HUMAN}" +%s)

    # Setting: Metric resolution. Low resolution in longer range could be limited to 11k datapoints
    declare -g QUERY_STEP=${GAHTER_MONIT_QUERY_STEP:-${GAHTER_MONIT_QUERY_STEP_DEFAULT}}

    echo "INFO: Metrics config time range from=${DATE_START} to=${DATE_END} step=${QUERY_STEP}"
    echo "INFO: Config Env GAHTER_MONIT_START_DATE: ${GAHTER_MONIT_START_DATE}"
    echo "INFO: Config Env GAHTER_MONIT_END_DATE: ${GAHTER_MONIT_END_DATE}"
    echo "INFO: Config Env GAHTER_MONIT_QUERY_STEP: ${GAHTER_MONIT_QUERY_STEP}"
    echo "INFO: Config Env GATHER_MONIT_CUSTOM_METRICS: ${GATHER_MONIT_CUSTOM_METRICS}"
    echo "INFO: Config Env GATHER_MONIT_DISCOVERY_PREFIXES: ${GATHER_MONIT_DISCOVERY_PREFIXES}"
    echo "INFO: Prometheus Host: ${PROM_HOST}"
}

function cleanup {
  rm "${CA_BUNDLE}"
}

function oc_get {
  oc get \
    --certificate-authority="${CA_BUNDLE}" \
    --token="${SS_TOKEN}" \
    "$@"
}

function prom_get {

    oc_get \
        --server="https://${PROM_HOST}" \
        --raw="/api/v1/${1}"

}

function prom_get_query_metric {
    local METRIC="${1}"; shift
    local QSTR="query=${METRIC}&start=${DATE_START}&end=${DATE_END}&step=${QUERY_STEP}"

    echo "INFO: prom_get_query_metric() QSTR: ${QSTR}"
    prom_get \
        "query_range?${QSTR}" \
        | gzip > "${PROM_PATH}/metric-${METRIC}.json.gz"
}

# # Query range to Prometheus API /api/v1/query_range
# function prom_query_range {
#     QUERY=$1
#     METRIC_FILE=${2:-$(echo "${QUERY}" |awk -F'\(' '{print$1}')}

#     # The metrics are ziped to decrease the datatransfer
#     "${CURL_CMD[@]}" \
#         -H "Authorization: Bearer ${SS_TOKEN}" \
#         -H "Accept-encoding: gzip" \
#         --data-urlencode "query=${QUERY}" \
#         --data-urlencode "start=${DATE_START}" \
#         --data-urlencode "end=${DATE_END}" \
#         --data-urlencode "step=${QUERY_STEP}" \
#         "https://${PROM_HOST}/api/v1/query_range" > "${PROM_PATH}/metric-${METRIC_FILE}.json.gz"
# }

#
# Gather specific metrics by name.
# Env var: GATHER_MONIT_CUSTOM_METRICS
#
function get_custom_metrics {

    if [[ -z "${GATHER_MONIT_CUSTOM_METRICS}" ]]; then
        return
    fi

    echo "INFO: Metrics will be collected from [$(date -d "@${DATE_START}")] to [$(date -d "@${DATE_END}")]"
    for METRIC in ${GATHER_MONIT_CUSTOM_METRICS}; do
        echo "INFO: Getting metric range: ${METRIC}"
        prom_get_query_metric "${METRIC}"
    done
}

#
# Discovery and gather metrics by prefixes.
# Env var: GATHER_MONIT_DISCOVERY_PREFIXES
#
function get_discovery_metrics {

    if [[ -z "${GATHER_MONIT_DISCOVERY_PREFIXES}" ]]; then
        return
    fi

    echo "INFO: Discovery all metrics' name and save on ${MONITORING_PATH}/prometheus-metrics.txt"
    prom_get "label/__name__/values" \
        | python2 -c \
            'import json,sys;v=[];[ v.append(d) for d in json.load(sys.stdin)["data"]];print("\n".join(v))' \
                > "${MONITORING_PATH}/prometheus-metrics.txt"

    echo "INFO: Starting discovery metrics by prefixes..."
    # TODO: fix it O(m*n) ;(
    while read METRIC; do
        for PREFIX in ${GATHER_MONIT_DISCOVERY_PREFIXES}; do
            if [[ "${METRIC}" =~ ^${PREFIX}.* ]]; then
                echo "INFO: Getting metric range: ${METRIC}"
                prom_get_query_metric "${METRIC}"
            fi
        done
    done < "${MONITORING_PATH}/prometheus-metrics.txt"
}

#
# Gather current alerts.
#
function get_alerts {

    set -o nounset
    set -o errexit

    # using oc get --raw because we directly control it and have standardized debugging on it
    oc_get \
        --server="https://${PROM_HOST}" \
        --raw=/api/v1/rules?type=alert \
            2> "${MONITORING_PATH}/alerts.err" \
            >  "${MONITORING_PATH}/alerts.json"
}

#> Main
init

# Collect metrics by name
get_custom_metrics || true

# Collect metrics by prefix
get_discovery_metrics || true

# Collect Prometheus Alerts
get_alerts || true

# force disk flush to ensure that all data gathered is accessible in the copy container
echo "INFO: Must-gather monitoring finished"
cleanup
sync
