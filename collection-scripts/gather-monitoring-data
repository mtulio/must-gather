#!/bin/bash

# Gather Monitoring Metrics and Dashboards.
# - Discovery and save Grafana dashboards, extracting the metrics' datapoints from Prometheus.
# - Gather custom metrics (when defined on Config variables).
# - Discovery metrics from prefix name.
#
# Config variables:
# - GATHER_MONIT_START_DATE: starting human readable date string (date -d). Default: "7 days ago".
# - GATHER_MONIT_END_DATE: ending human readable date string (date -d). Default: "now".
# - GATHER_MONIT_QUERY_STEP: metric resolution to get from Prometheus. Default: "1m".
# - GATHER_PROM_QUERIES_RANGE: list of additional metrics name to be collected. Default: Undefined
# - GATHER_MONIT_DISCOVERY_PREFIXES: discovery metrics by prefixes. Default: ''
# - GATHER_MONIT_TOKEN: optional service account token to gather Prometheus and Grafana API. Default: Undefined
#
# To create the ConfigMap:
# $ echo -e 'GATHER_MONIT_START_DATE="15 days ago"\nGATHER_MONIT_QUERY_STEP="5m"' > env
# $ echo -e 'GATHER_PROM_QUERIES_RANGE="up"' > env
# $ echo -e 'GATHER_MONIT_DISCOVERY_PREFIXES="apiserver_"' > env
# $ oc create configmap must-gather-env -n openshift-monitoring --from-file=env=env
#
# References:
# - Prometheus API: https://prometheus.io/docs/prometheus/latest/querying/api/

#Safeguards
set -o pipefail
set -o nounset
set -o errexit

function err_report {
    echo "ERROR: on line $1 from ${0}"
}
trap 'err_report $LINENO' ERR

declare -r GATHER_MONIT_START_DATE_DEFAULT="7 days ago"
declare -r GATHER_MONIT_END_DATE_DEFAULT="now"
declare -r GATHER_MONIT_QUERY_STEP_DEFAULT="1m"

declare -r MONIT_NS="openshift-monitoring"
declare -r MONIT_ENV="must-gather-env"

declare -r MG_BASE_PATH="/must-gather"
declare -r MG_MONITORING_PATH="${MG_BASE_PATH}/monitoring"
declare -r MG_PROM_PATH="${MG_MONITORING_PATH}/prometheus"
declare -r MG_METRICS_PATH="${MG_PROM_PATH}/metrics"
declare -r CA_BUNDLE="${MG_MONITORING_PATH}/ca-bundle.crt"

function get_env {
    oc -n "${MONIT_NS}" extract "cm/${MONIT_ENV}" \
        --keys=env \
        --to="${MG_MONITORING_PATH}/" 2>&1 >/dev/null || true

    echo "INFO: Get custom metrics from ConfigMap ${MONIT_ENV} on project ${MONIT_NS}"
    if [[ -s "${MG_MONITORING_PATH}/env" ]]; then
        echo "INFO: Loading custom environments variables from ${MG_MONITORING_PATH}/env"
        source "${MG_MONITORING_PATH}/env"
    else
        echo "INFO: Unable to load custom environments from ConfigMap, ignoring."
    fi
}

# this is a CA bundle we need to verify the monitoring route,
# we will write it to disk so we can use it in the flag
function get_ca_bundle {
    oc -n openshift-config-managed \
        get cm default-ingress-cert \
        -o jsonpath='{.data.ca-bundle\.crt}' > "${CA_BUNDLE}"
}

function setup {

    mkdir -p "${MG_METRICS_PATH}"

    get_env

    get_ca_bundle

    # Setting: Session token, overwriten by GATHER_MONIT_TOKEN
    declare -r SS_TOKEN="${GATHER_MONIT_TOKEN:-$(oc whoami -t)}"
    declare -r PROM_HOST=$(oc -n "${MONIT_NS}" get route prometheus-k8s -o jsonpath='{.spec.host}{"\n"}')
    declare -r PROM_API_PATH="/api/v1"

    # Query Param: 'start' and 'end' timestamp
    local date_start_human=${GATHER_MONIT_START_DATE:-${GATHER_MONIT_START_DATE_DEFAULT}}
    local date_end_human=${GATHER_MONIT_END_DATE:-${GATHER_MONIT_END_DATE_DEFAULT}}
    declare -g DATE_START=$(date -d "${date_start_human}" +%s)
    declare -g DATE_END=$(date -d "${date_end_human}" +%s)

    # Query Param: 'step'. Low metric resolution with long range could be limited to 11k datapoints.
    declare -g QUERY_STEP=${GATHER_MONIT_QUERY_STEP:-${GATHER_MONIT_QUERY_STEP_DEFAULT}}

    declare -g PROM_API_QSTR="start=${DATE_START}&end=${DATE_END}&step=${QUERY_STEP}"

    cat <<-EOF
INFO: Metrics config time range from=${DATE_START} to=${DATE_END} step=${QUERY_STEP}
INFO: Metrics human  time range from=[$(date -d "@${DATE_START}")] to [$(date -d "@${DATE_END}")]
INFO: Config Env GATHER_MONIT_START_DATE: ${GATHER_MONIT_START_DATE:-""}
INFO: Config Env GATHER_MONIT_END_DATE: ${GATHER_MONIT_END_DATE:-""}
INFO: Config Env GATHER_MONIT_QUERY_STEP: ${GATHER_MONIT_QUERY_STEP:-""}
INFO: Config Env GATHER_PROM_QUERIES_RANGE: ${GATHER_PROM_QUERIES_RANGE:-""}
INFO: Config Env GATHER_MONIT_DISCOVERY_PREFIXES: ${GATHER_MONIT_DISCOVERY_PREFIXES:-""}
INFO: Prometheus endpoint: https://${PROM_HOST}
INFO: Prometheus base query: ${PROM_API_PATH}/<path>?query=<metric>&${PROM_API_QSTR}"
EOF
}

function cleanup {
    rm "${CA_BUNDLE}"
}

function oc_get {
    oc get \
        --certificate-authority="${CA_BUNDLE}" \
        --token="${SS_TOKEN}" \
        "$@"
}

function prom_get_api {
    oc_get \
        --server="https://${PROM_HOST}" \
        --raw="${PROM_API_PATH}/${1}"
}

function prom_get_query_range {
    local api_expression="query_range"

    local query="${1}"; shift
    local req_query="${api_expression}?query=${query}&${PROM_API_QSTR}"

    local file_base="${MG_METRICS_PATH}/${api_expression}-${query}"
    local file_ok="${file_base}.json.gz";
    local file_err="${file_base}.stderr";

    echo "INFO: Collecting query /${api_expression}?query=${query}"
    echo "${file_base};${req_query}" >> "${MG_PROMETHEUS_PATH}/${api_expression}.log"
    prom_get_api "${req_query}" 2> "${file_err}" | gzip > "${file_ok}"
}

#
# Gather specific metrics by name.
# Env var: GATHER_PROM_QUERIES_RANGE
#
function get_query_range {

    if [[ -z "${GATHER_PROM_QUERIES_RANGE:-}" ]]; then
        return
    fi
    echo "INFO: Collecting custom metrics..."

    for query in ${GATHER_PROM_QUERIES_RANGE}; do
        prom_get_query_range "${query}"
    done
}

#
# Discovery and gather metrics by prefixes.
# Env var: GATHER_MONIT_DISCOVERY_PREFIXES
#
function get_discovery_prefixes {

    if [[ -z "${GATHER_MONIT_DISCOVERY_PREFIXES:-}" ]]; then
        return
    fi
    echo "INFO: Collecting metrics by prefixes..."

    prom_get_api "label/__name__/values" \
        | python2 -c \
            'import json,sys;v=[];[ v.append(d) for d in json.load(sys.stdin)["data"]];print("\n".join(v))' \
                > "${MG_PROM_PATH}/prometheus-metrics.txt"

    # lookup metrics into current available.
    while read METRIC; do
        for PREFIX in ${GATHER_MONIT_DISCOVERY_PREFIXES}; do
            if [[ "${METRIC}" =~ ^${PREFIX}.* ]]; then
                prom_get_query_range "${METRIC}"
            fi
        done
    done < "${MG_PROM_PATH}/prometheus-metrics.txt"
}

function main {
    setup

    # Collect metrics by name
    get_query_range

    # Collect metrics by prefix
    get_discovery_prefixes

    # force disk flush to ensure that all data gathered is accessible in the copy container
    cleanup
    sync
}

main
